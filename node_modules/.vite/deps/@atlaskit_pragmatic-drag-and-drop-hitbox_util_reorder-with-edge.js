import {
  _slicedToArray
} from "./chunk-V7VTYSPF.js";
import "./chunk-5WRI5ZAA.js";

// ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/public-utils/reorder.js
function reorder(_ref) {
  var list = _ref.list, startIndex = _ref.startIndex, finishIndex = _ref.finishIndex;
  if (startIndex === -1 || finishIndex === -1) {
    return list;
  }
  var result = Array.from(list);
  var _result$splice = result.splice(startIndex, 1), _result$splice2 = _slicedToArray(_result$splice, 1), removed = _result$splice2[0];
  result.splice(finishIndex, 0, removed);
  return result;
}

// ../node_modules/@atlaskit/pragmatic-drag-and-drop-hitbox/dist/esm/get-reorder-destination-index.js
function getReorderDestinationIndex(_ref) {
  var startIndex = _ref.startIndex, closestEdgeOfTarget = _ref.closestEdgeOfTarget, indexOfTarget = _ref.indexOfTarget, axis = _ref.axis;
  if (startIndex === -1 || indexOfTarget === -1) {
    return startIndex;
  }
  if (startIndex === indexOfTarget) {
    return startIndex;
  }
  if (closestEdgeOfTarget == null) {
    return indexOfTarget;
  }
  var isGoingAfter = axis === "vertical" && closestEdgeOfTarget === "bottom" || axis === "horizontal" && closestEdgeOfTarget === "right";
  var isMovingForward = startIndex < indexOfTarget;
  if (isMovingForward) {
    return isGoingAfter ? indexOfTarget : indexOfTarget - 1;
  }
  return isGoingAfter ? indexOfTarget + 1 : indexOfTarget;
}

// ../node_modules/@atlaskit/pragmatic-drag-and-drop-hitbox/dist/esm/reorder-with-edge.js
function reorderWithEdge(_ref) {
  var list = _ref.list, startIndex = _ref.startIndex, closestEdgeOfTarget = _ref.closestEdgeOfTarget, indexOfTarget = _ref.indexOfTarget, axis = _ref.axis;
  return reorder({
    list,
    startIndex,
    finishIndex: getReorderDestinationIndex({
      closestEdgeOfTarget,
      startIndex,
      indexOfTarget,
      axis
    })
  });
}
export {
  reorderWithEdge
};
//# sourceMappingURL=@atlaskit_pragmatic-drag-and-drop-hitbox_util_reorder-with-edge.js.map
